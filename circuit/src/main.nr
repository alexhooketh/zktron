use dep::std::collections::bounded_vec::BoundedVec;
use dep::std::hash::sha256_var;
use dep::std::ecdsa_secp256k1::verify_signature;

global ALLOWED_PRODUCERS: [[u8; 64]; 27] = [[18, 181, 13, 104, 149, 230, 1, 15, 15, 127, 180, 230, 235, 160, 15, 180, 236, 164, 98, 41, 100, 155, 96, 82, 11, 192, 159, 139, 179, 185, 220, 38, 214, 106, 180, 117, 42, 47, 59, 214, 165, 229, 23, 182, 161, 115, 160, 166, 241, 203, 228, 134, 122, 1, 149, 210, 191, 235, 159, 130, 56, 23, 169, 224], [103, 148, 58, 173, 1, 189, 35, 117, 212, 108, 25, 207, 158, 139, 160, 77, 70, 73, 5, 19, 235, 154, 0, 145, 179, 118, 127, 175, 42, 19, 250, 171, 74, 5, 153, 96, 43, 173, 225, 248, 222, 60, 201, 211, 94, 204, 33, 76, 131, 163, 103, 45, 45, 219, 217, 103, 126, 171, 59, 66, 250, 186, 39, 0], [96, 88, 220, 232, 27, 142, 182, 172, 124, 69, 211, 243, 18, 254, 176, 238, 184, 56, 192, 241, 134, 135, 197, 143, 139, 118, 236, 61, 240, 123, 4, 5, 85, 51, 230, 143, 49, 34, 31, 23, 180, 84, 158, 130, 74, 125, 201, 28, 241, 49, 234, 83, 186, 179, 5, 55, 244, 196, 152, 180, 78, 130, 52, 93], [224, 17, 247, 0, 116, 62, 251, 147, 104, 225, 148, 65, 130, 190, 122, 73, 220, 21, 82, 170, 99, 12, 196, 0, 50, 174, 143, 115, 205, 83, 141, 255, 206, 18, 87, 125, 20, 46, 163, 217, 113, 133, 246, 106, 217, 140, 29, 51, 19, 203, 231, 112, 30, 73, 26, 163, 230, 148, 251, 197, 118, 163, 196, 161], [113, 122, 127, 177, 17, 36, 15, 19, 7, 127, 38, 33, 70, 166, 63, 143, 148, 219, 238, 164, 197, 131, 84, 225, 157, 27, 157, 86, 108, 62, 187, 40, 199, 104, 91, 138, 156, 97, 25, 46, 80, 248, 102, 74, 239, 135, 42, 5, 109, 133, 185, 178, 125, 82, 248, 203, 239, 173, 234, 53, 221, 24, 38, 19], [198, 187, 23, 133, 17, 11, 220, 54, 7, 148, 249, 160, 84, 32, 208, 154, 198, 70, 207, 236, 95, 248, 212, 199, 227, 125, 224, 59, 179, 114, 159, 226, 158, 204, 121, 177, 150, 222, 198, 26, 91, 51, 235, 121, 58, 238, 133, 74, 57, 241, 67, 217, 9, 111, 124, 149, 148, 246, 10, 153, 213, 155, 121, 19], [149, 116, 133, 155, 155, 113, 100, 206, 132, 97, 243, 9, 172, 28, 55, 107, 111, 180, 50, 223, 218, 214, 131, 90, 139, 58, 137, 193, 8, 28, 9, 104, 109, 99, 128, 44, 172, 230, 95, 16, 60, 110, 198, 202, 238, 232, 65, 211, 132, 19, 11, 163, 137, 92, 98, 164, 171, 227, 134, 77, 98, 60, 173, 194], [103, 222, 72, 54, 82, 108, 143, 32, 151, 170, 126, 39, 59, 25, 130, 188, 90, 191, 188, 180, 154, 118, 148, 188, 145, 10, 231, 74, 188, 255, 141, 84, 91, 92, 116, 240, 120, 191, 153, 44, 244, 196, 112, 97, 12, 120, 232, 31, 172, 138, 223, 228, 108, 78, 171, 210, 209, 5, 104, 82, 83, 156, 176, 73], [221, 67, 217, 82, 208, 149, 110, 105, 61, 213, 174, 70, 105, 17, 90, 90, 183, 2, 27, 1, 74, 237, 245, 228, 127, 18, 194, 104, 54, 74, 159, 158, 7, 22, 237, 118, 218, 114, 248, 250, 158, 121, 51, 109, 231, 212, 89, 2, 193, 165, 218, 221, 51, 122, 217, 186, 15, 153, 36, 206, 187, 152, 75, 160], [150, 194, 153, 121, 57, 156, 80, 77, 125, 218, 127, 142, 238, 150, 166, 77, 86, 79, 186, 44, 247, 148, 83, 187, 149, 219, 221, 208, 102, 242, 215, 156, 180, 39, 58, 215, 250, 239, 183, 69, 251, 234, 6, 238, 142, 39, 195, 145, 240, 78, 174, 15, 101, 99, 159, 170, 60, 206, 85, 107, 71, 73, 32, 142], [30, 112, 255, 201, 252, 136, 231, 243, 235, 173, 71, 172, 229, 30, 37, 17, 10, 251, 191, 67, 222, 254, 5, 1, 152, 166, 94, 57, 239, 38, 189, 50, 171, 253, 196, 47, 199, 72, 49, 14, 21, 188, 176, 18, 99, 29, 185, 201, 27, 251, 40, 122, 113, 186, 223, 20, 188, 18, 175, 226, 37, 193, 86, 130], [86, 120, 132, 48, 108, 54, 139, 27, 222, 171, 135, 180, 99, 59, 160, 17, 11, 244, 71, 191, 3, 30, 32, 218, 19, 145, 239, 87, 33, 244, 109, 2, 127, 245, 144, 109, 224, 163, 119, 65, 14, 220, 195, 168, 85, 97, 181, 197, 60, 54, 75, 237, 187, 218, 199, 193, 12, 123, 253, 176, 183, 183, 220, 13], [32, 161, 204, 61, 140, 32, 30, 103, 147, 181, 245, 143, 86, 45, 18, 125, 203, 233, 45, 168, 149, 88, 176, 181, 116, 189, 94, 191, 215, 221, 48, 170, 241, 167, 118, 79, 14, 165, 52, 86, 22, 25, 141, 148, 219, 67, 108, 105, 234, 65, 148, 48, 198, 114, 121, 120, 237, 80, 15, 133, 104, 47, 235, 1], [32, 46, 73, 32, 164, 52, 8, 12, 89, 231, 32, 43, 31, 235, 132, 227, 123, 103, 214, 49, 17, 174, 5, 82, 35, 170, 52, 51, 120, 147, 129, 141, 45, 109, 249, 92, 91, 244, 80, 45, 33, 146, 0, 255, 75, 37, 111, 184, 115, 104, 230, 143, 214, 183, 63, 64, 125, 232, 163, 212, 202, 248, 113, 104], [99, 24, 202, 220, 199, 150, 151, 67, 22, 32, 122, 169, 5, 248, 187, 33, 223, 113, 78, 151, 213, 227, 147, 192, 10, 231, 172, 206, 155, 196, 159, 54, 182, 12, 51, 57, 240, 129, 74, 100, 187, 173, 23, 56, 247, 148, 108, 251, 18, 245, 24, 142, 114, 22, 188, 108, 3, 132, 121, 184, 255, 29, 184, 22], [82, 249, 173, 242, 226, 235, 234, 233, 61, 187, 231, 218, 142, 255, 47, 143, 232, 54, 124, 90, 150, 138, 185, 7, 152, 90, 248, 67, 93, 179, 148, 168, 253, 55, 149, 211, 78, 179, 151, 171, 247, 165, 18, 139, 0, 146, 163, 47, 241, 221, 36, 215, 46, 3, 62, 119, 255, 215, 188, 103, 191, 62, 216, 146], [127, 70, 130, 114, 14, 232, 50, 1, 58, 56, 75, 104, 13, 85, 93, 223, 175, 191, 192, 132, 66, 10, 39, 18, 179, 234, 76, 216, 24, 121, 224, 129, 77, 207, 41, 173, 232, 183, 63, 22, 167, 68, 119, 53, 141, 122, 166, 1, 221, 118, 0, 227, 128, 25, 215, 8, 131, 18, 78, 54, 249, 96, 205, 210], [218, 173, 145, 69, 20, 184, 164, 237, 254, 103, 184, 57, 147, 62, 81, 97, 151, 223, 65, 49, 144, 42, 12, 240, 21, 104, 205, 65, 166, 141, 249, 107, 238, 209, 249, 116, 201, 134, 72, 230, 163, 183, 184, 221, 150, 1, 183, 167, 106, 179, 131, 88, 73, 246, 99, 52, 226, 70, 201, 92, 120, 126, 5, 85], [205, 224, 48, 52, 47, 117, 246, 6, 18, 148, 193, 46, 192, 232, 244, 114, 63, 116, 231, 212, 130, 30, 33, 69, 28, 128, 233, 162, 198, 1, 236, 188, 67, 201, 25, 250, 196, 228, 80, 216, 166, 145, 201, 119, 127, 13, 138, 119, 93, 167, 7, 70, 141, 149, 94, 222, 182, 90, 231, 246, 172, 1, 19, 135], [243, 126, 97, 6, 140, 32, 59, 179, 131, 173, 131, 139, 224, 196, 241, 122, 75, 91, 138, 237, 97, 14, 35, 33, 75, 22, 206, 115, 230, 69, 132, 124, 55, 164, 78, 116, 232, 236, 91, 173, 124, 220, 176, 48, 125, 93, 129, 141, 79, 24, 34, 56, 185, 113, 47, 227, 251, 151, 246, 106, 254, 126, 189, 200], [45, 201, 222, 199, 231, 49, 70, 246, 29, 211, 99, 94, 55, 241, 208, 62, 239, 5, 144, 95, 75, 17, 21, 41, 85, 240, 29, 196, 151, 225, 193, 0, 48, 35, 66, 146, 173, 194, 254, 6, 39, 207, 175, 20, 190, 77, 58, 40, 220, 100, 35, 246, 185, 245, 162, 60, 252, 108, 89, 14, 9, 137, 8, 2], [167, 162, 134, 152, 53, 127, 167, 78, 108, 212, 245, 143, 162, 130, 148, 76, 234, 225, 120, 226, 29, 125, 139, 62, 134, 41, 141, 182, 43, 131, 218, 217, 132, 91, 80, 145, 140, 122, 22, 182, 101, 57, 70, 142, 242, 244, 211, 216, 26, 181, 166, 131, 207, 235, 83, 61, 208, 38, 186, 207, 167, 185, 135, 211], [245, 22, 59, 106, 208, 221, 194, 253, 9, 24, 2, 95, 172, 21, 112, 169, 154, 102, 250, 45, 97, 239, 138, 111, 142, 120, 226, 179, 238, 99, 148, 209, 36, 252, 86, 53, 22, 26, 222, 41, 71, 22, 144, 236, 125, 151, 92, 44, 237, 229, 98, 23, 86, 248, 92, 149, 74, 195, 101, 215, 63, 9, 22, 180], [235, 62, 254, 241, 140, 71, 79, 198, 245, 26, 41, 146, 165, 26, 14, 44, 247, 226, 110, 11, 183, 68, 251, 70, 133, 214, 4, 213, 189, 95, 9, 39, 125, 245, 203, 185, 214, 3, 181, 250, 115, 105, 74, 143, 5, 198, 222, 4, 44, 49, 209, 114, 5, 123, 153, 158, 14, 91, 231, 24, 99, 206, 201, 97], [231, 169, 76, 158, 193, 138, 134, 88, 116, 238, 168, 129, 23, 36, 1, 102, 246, 157, 68, 218, 28, 215, 62, 11, 67, 145, 149, 104, 69, 68, 107, 101, 95, 201, 16, 148, 218, 137, 203, 148, 61, 37, 45, 154, 133, 174, 170, 191, 80, 67, 238, 170, 34, 134, 19, 40, 137, 202, 209, 101, 221, 48, 99, 50], [60, 25, 38, 83, 157, 142, 38, 0, 34, 50, 199, 116, 127, 215, 85, 220, 50, 151, 41, 250, 6, 217, 187, 51, 3, 109, 241, 100, 44, 40, 65, 163, 23, 47, 167, 66, 18, 44, 214, 105, 235, 6, 10, 52, 131, 127, 87, 137, 43, 45, 198, 132, 86, 104, 117, 118, 85, 223, 219, 217, 250, 225, 96, 124], [166, 30, 22, 217, 45, 123, 184, 7, 246, 135, 224, 214, 126, 111, 29, 165, 188, 221, 254, 123, 205, 31, 110, 144, 169, 16, 194, 32, 251, 41, 236, 70, 202, 86, 137, 22, 185, 90, 243, 108, 6, 248, 4, 35, 81, 27, 52, 210, 166, 84, 44, 130, 3, 84, 50, 57, 94, 199, 163, 8, 74, 157, 226, 255]];

fn main(
    prev_block_id: pub [u8; 32],
    new_block_id: pub [u8; 32],
    tx_root: pub [u8; 32],
    proposer_public_key: [u8; 64],
    header: [u8; 256]
) {
    // verify that the proposer is in allowlist
    assert(ALLOWED_PRODUCERS.any(|x| x == proposer_public_key));

    // protobuf fuckery. in tron, everything is in protobuf
    let mut offset = 0;

    assert(header[offset] & 7 == 2); // LEN
    assert(header[offset] >> 3 == 1);
    offset += 1;

    let raw_data_length = header[offset]; // WARNING: we assume raw data is < 128 bytes
    offset += 1;

    assert(header[offset] & 7 == 0); // VARINT
    assert(header[offset] >> 3 == 1);
    offset += 1;

    let mut done = false; // we don't need timestamp so we skip it
    for _ in 0..10 {
        if (header[offset] & 0x80 == 0x80) & !done {
            offset += 1;
        } else {
            done = true;
        }
    }
    offset += 1;

    assert(header[offset] & 7 == 2); // LEN
    assert(header[offset] >> 3 == 2);
    offset += 2; // txroot length is always 32 (1 byte)

    for i in 0..32 {
        assert(tx_root[i] == header[offset]);
        offset += 1;
    }

    assert(header[offset] & 7 == 2); // LEN
    assert(header[offset] >> 3 == 3);
    offset += 2; // prevblockhash length is always 32 (1 byte)

    for i in 0..32 {
        assert(prev_block_id[i] == header[offset]);
        offset += 1;
    }

    assert(header[offset] & 7 == 0); // VARINT
    assert(header[offset] >> 3 == 7);
    offset += 1;

    let mut block_number: u64 = 0;
    let mut done = false;
    for x in 0..4 { // max block number 2**28
        if !done {
            let i = header[offset];
            block_number += (i & 0x7f) as u64 << (x * 7) as u8;
            done = (i & 0x80 == 0) as bool;
            offset += 1;
        }
    }

    let mut asserted_number = 0;
    for i in 0..8 {
        asserted_number += (new_block_id[i] as u64 << (56 - (8 * i) as u8));
    }
    assert(asserted_number == block_number);

    assert(header[offset] & 7 == 2); // LEN
    assert(header[offset] >> 3 == 9);
    offset += 23; // we skip 21-byte witness_address here

    assert(header[offset] & 7 == 0); // VARINT
    assert(header[offset] >> 3 == 10);
    offset += 2; // version; always 30

    assert(header[offset] & 7 == 2); // VARINT
    assert(header[offset] >> 3 == 2);
    offset += 1;
    assert(header[offset] == 65); // signature is always 65 bytes
    offset += 1;

    let mut signature_rs = [0; 64];
    let mut signature_v = 0;
    for i in 0..64 {
        signature_rs[i] = header[offset];
        offset += 1;
    }
    // AFAICT it's either 0 or 1 in tron implementation so i didn't constaint it
    signature_v = header[offset];

    let mut raw_data = [0; 128];
    for i in 0..128 {
        if i < raw_data_length {
            raw_data[i] = header[i+2];
        }
    }

    // block id in tron is block_number.to_bytes(8) + sha256(raw_data)[8:]
    let message_hash = sha256_var(raw_data, raw_data_length as u64);
    for i in 8..32 {
        assert(new_block_id[i] == message_hash[i]);
    }

    let mut pub_key_x: [u8; 32] = [0; 32];
    let mut pub_key_y: [u8; 32] = [0; 32];

    for i in 0..32 {
        pub_key_x[i] = proposer_public_key[i];
        pub_key_y[i] = proposer_public_key[i + 32];
    }
    assert(verify_signature(pub_key_x, pub_key_y, signature_rs, message_hash));
}
